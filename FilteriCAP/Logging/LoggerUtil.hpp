/*
 * Copyright Â© 2018 Cloudveil Technology Inc.
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

#ifndef LOGGING_LOGGERUTIL_HPP_
#define LOGGING_LOGGERUTIL_HPP_

#include <functional>
#include <string>

namespace Citadel
{
	namespace Logging
	{
		using MessageCallback = std::function<void(const std::string& message)>;
	}
}

namespace Citadel
{

	namespace Logging
	{

		/**
		 * The LoggerUtil function serves as a static point where an external listener can
		 * plug in to messages being generated by the core software. The most obvious use
		 * case for such a thing is for logging purposes, hence the name.
		 */
		class LoggerUtil
		{

			public:

				/**
				 * Sets the message callback. This will be invoked whenever a generic or
				 * informational message is written to the logger util.
				 * @param cb The message callback;
				 */
				static const void SetMessageCallback(MessageCallback cb) noexcept;

				/**
				 * Sets the warning callback. This will be invoked whenever a warning is
				 * written to the logger util.
				 * @param cb The warning callback.
				 */
				static const void SetWarningCallback(MessageCallback cb) noexcept;

				/**
				 * Sets the error callback. This will be invoked whenever an error is
				 * written to the logger util.
				 * @param cb The error callback.
				 */
				static const void SetErrorCallback(MessageCallback cb) noexcept;

				/**
				 * Writes an informational message to the current appropriate callback,
				 * if any is defined.
				 * @param message The message to write.
				 */
				static const void ReportMessage(const std::string& message) noexcept;

				/**
				 * Writes a warning message to the current appropriate callback,
				 * if any is defined.
				 * @param message The message to write.
				 */
				static const void ReportWarning(const std::string& message) noexcept;

				/**
				 * Writes an error message to the current appropriate callback,
				 * if any is defined.
				 * @param message The message to write.
				 */
				static const void ReportError(const std::string& message) noexcept;

			private:

				LoggerUtil() noexcept;
				virtual ~LoggerUtil() noexcept;

				/**
				 * The message callback.
				 */
				static MessageCallback s_msgCb;

				/**
				 * The warning callback.
				 */
				static MessageCallback s_warnCb;

				/**
				 * The error callback.
				 */
				static MessageCallback s_errCb;
		};
	}

} /* namespace Citadel */

#endif /* LOGGING_LOGGERUTIL_HPP_ */
